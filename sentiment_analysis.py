# -*- coding: utf-8 -*-
"""Sentiment_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v-1gbQo8MGZdVRo198TDSte9__9GhZcp
"""

import string
from collections import Counter
import matplotlib.pyplot as plt
from nltk.corpus import stopwords
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from nltk.stem import WordNetLemmatizer
from nltk.tokenize import word_tokenize
import pandas as pd
import seaborn as sns

import nltk
nltk.download('vader_lexicon')

!pwd

text = open('read.txt', encoding='utf-8').read()
lower_case = text.lower()
cleaned_text = lower_case.translate(str.maketrans('', '', string.punctuation))

# Using word_tokenize because it's faster than split()
tokenized_words = word_tokenize(cleaned_text, "english")

# Removing Stop Words
final_words = []
for word in tokenized_words:
    if word not in stopwords.words('english'):
        final_words.append(word)

# Lemmatization - From plural to single + Base form of a word (example better-> good)
lemma_words = []
for word in final_words:
    word = WordNetLemmatizer().lemmatize(word)
    lemma_words.append(word)

emotion_list = []
with open('emotions.txt', 'r') as file:
    for line in file:
        clear_line = line.replace("\n", '').replace(",", '').replace("'", '').strip()
        word, emotion = clear_line.split(':')

        if word in lemma_words:
            emotion_list.append(emotion)

#print(emotion_list)
w = Counter(emotion_list)

w = dict(w)


lst1 = []
lst2 = []



for key in w:
  lst1.append(key)
  lst2.append(w[key])
lst1
lst2
lst3 = []
for i in range(len(lst2)):
  lst2[i] = (lst2[i]/sum(lst2))*100
lst2

data = pd.DataFrame()
data['Emotions'] = lst1
data['values'] = lst2
data

plt.figure(figsize=(10,7))
from wordcloud import WordCloud

wordcloud = WordCloud(height=500 , width=800 , max_font_size = 110 )
img = wordcloud.generate(cleaned_text)
plt.imshow(img , interpolation='bilinear')
plt.axis('off')
plt.show()

def sentiment_analyse(sentiment_text):
    score = SentimentIntensityAnalyzer().polarity_scores(sentiment_text)
    if score['neg'] > score['pos']:
        print("Negative Sentiment")
    elif score['neg'] < score['pos']:
        print("Positive Sentiment")
    else:
        print("Neutral Sentiment")

plt.figure(figsize=(10,8))
import seaborn as sns
sns.set_style('whitegrid')
sns.barplot(x='Emotions' ,y='values', data=data)
plt.xticks(
    rotation=45, 
    horizontalalignment='right',
    fontweight='light',
    fontsize='x-large'  
)
plt.savefig('graph1.png')
plt.show()